// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: performance.proto

package perf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PerfTestService_PingPong_FullMethodName            = "/perf.PerfTestService/PingPong"
	PerfTestService_StreamingDownload_FullMethodName   = "/perf.PerfTestService/StreamingDownload"
	PerfTestService_StreamingUpload_FullMethodName     = "/perf.PerfTestService/StreamingUpload"
	PerfTestService_BidirectionalStream_FullMethodName = "/perf.PerfTestService/BidirectionalStream"
)

// PerfTestServiceClient is the client API for PerfTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerfTestServiceClient interface {
	// Simple latency test
	PingPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	// Throughput testing
	StreamingDownload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error)
	StreamingUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadSummary], error)
	// Bidirectional streaming test
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
}

type perfTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerfTestServiceClient(cc grpc.ClientConnInterface) PerfTestServiceClient {
	return &perfTestServiceClient{cc}
}

func (c *perfTestServiceClient) PingPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, PerfTestService_PingPong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfTestServiceClient) StreamingDownload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PerfTestService_ServiceDesc.Streams[0], PerfTestService_StreamingDownload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, DownloadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_StreamingDownloadClient = grpc.ServerStreamingClient[DownloadResponse]

func (c *perfTestServiceClient) StreamingUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadSummary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PerfTestService_ServiceDesc.Streams[1], PerfTestService_StreamingUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadSummary]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_StreamingUploadClient = grpc.ClientStreamingClient[UploadRequest, UploadSummary]

func (c *perfTestServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PerfTestService_ServiceDesc.Streams[2], PerfTestService_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_BidirectionalStreamClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

// PerfTestServiceServer is the server API for PerfTestService service.
// All implementations must embed UnimplementedPerfTestServiceServer
// for forward compatibility.
type PerfTestServiceServer interface {
	// Simple latency test
	PingPong(context.Context, *PingRequest) (*PongResponse, error)
	// Throughput testing
	StreamingDownload(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error
	StreamingUpload(grpc.ClientStreamingServer[UploadRequest, UploadSummary]) error
	// Bidirectional streaming test
	BidirectionalStream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	mustEmbedUnimplementedPerfTestServiceServer()
}

// UnimplementedPerfTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerfTestServiceServer struct{}

func (UnimplementedPerfTestServiceServer) PingPong(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedPerfTestServiceServer) StreamingDownload(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDownload not implemented")
}
func (UnimplementedPerfTestServiceServer) StreamingUpload(grpc.ClientStreamingServer[UploadRequest, UploadSummary]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingUpload not implemented")
}
func (UnimplementedPerfTestServiceServer) BidirectionalStream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedPerfTestServiceServer) mustEmbedUnimplementedPerfTestServiceServer() {}
func (UnimplementedPerfTestServiceServer) testEmbeddedByValue()                         {}

// UnsafePerfTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerfTestServiceServer will
// result in compilation errors.
type UnsafePerfTestServiceServer interface {
	mustEmbedUnimplementedPerfTestServiceServer()
}

func RegisterPerfTestServiceServer(s grpc.ServiceRegistrar, srv PerfTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedPerfTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerfTestService_ServiceDesc, srv)
}

func _PerfTestService_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfTestServiceServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerfTestService_PingPong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfTestServiceServer).PingPong(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfTestService_StreamingDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfTestServiceServer).StreamingDownload(m, &grpc.GenericServerStream[DownloadRequest, DownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_StreamingDownloadServer = grpc.ServerStreamingServer[DownloadResponse]

func _PerfTestService_StreamingUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PerfTestServiceServer).StreamingUpload(&grpc.GenericServerStream[UploadRequest, UploadSummary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_StreamingUploadServer = grpc.ClientStreamingServer[UploadRequest, UploadSummary]

func _PerfTestService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PerfTestServiceServer).BidirectionalStream(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerfTestService_BidirectionalStreamServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

// PerfTestService_ServiceDesc is the grpc.ServiceDesc for PerfTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerfTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perf.PerfTestService",
	HandlerType: (*PerfTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _PerfTestService_PingPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDownload",
			Handler:       _PerfTestService_StreamingDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingUpload",
			Handler:       _PerfTestService_StreamingUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _PerfTestService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "performance.proto",
}
